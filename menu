import time
import pandas as pd
import numpy as np
   
    
    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
def filtros():
    user = " "
    city=""
    month= ""
    day = " "
    userDay= " "
    userCity = " "
    userMonth = " "
    while user !="no":
        userCity = input("por favor escoge una :\n 1. para chicago\n 2. para New york\n 3. Para Londres")
        if userCity=="1":
            city = "chicago"
            print("has ecogido", city)
        elif userCity=="2":
            city = "new york city"
            print("has ecogido", city)
        elif userCity=="3":
            city="londres"
            print("has ecogido", city)

        userDay = input("escoge un dia:\n 1.Monday \n 2.Tuesday\n 3.Wdnesday"
        "\n 4. Thursday \n 5 Friday\n 6.Saturday \n 7 Sunday")

        if userDay=="1":
            day="Monday"
            print("has ecogido", day)
        elif userDay==str(2):
            day = "Tuesday"
            print("has ecogido", day)
        elif userDay=='3':
            day = "Wednesday"
            print("has ecogido", day )
        elif userDay=='4':
            day = "Thursday"
            print("has ecogido", day )
        elif userDay=='5':
            day = "Friday"
            print("has ecogido", day )
        elif userDay=='6':
            day = "Saturday"
            print("has ecogido", day)
        elif userDay=='7':
            day = "Sunday"
            print("has ecogido", day)




        userMonth = input("choose a month:\n 1.January \n 2.February\n 3.March"
        "\n 4. April \n 5 May \n 6.June \n 7 July")

        if userMonth=="1":
            month = "january"
            print("has ecogido", month)
        elif userMonth=="2":
            month="February"
            print("has ecogido", month)
        elif userMonth=="3":
            month="March"
            print("has ecogido", month)
        elif userMonth=="4":
            month="April"
            print("has ecogido", month)
        elif userMonth=="5":
            month="May"
            print("has ecogido", month)
        elif userMonth=="6":
            month="June"
            print("has ecogido", month)
        elif userMonth=="7":
            month="July"
            print("has ecogido", month)
       # print("Return Values: ",city,month,day)    


        

        return city,month,day 
        
        

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """

    # load data file into a dataframe
    df = pd.read_csv(CITY_DATA[city])

    # convert the Start Time column to datetime
    df['Start Time'] = pd.to_datetime(df['Start Time'])

    # extract month and day of week from Start Time to create new columns
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.weekday_name

    # filter by month if applicable
    if month != 'all':
        # use the index of the months list to get the corresponding int
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month) + 1

        # filter by month to create the new dataframe
        df = df[df['month'] == month]

    # filter by day of week if applicable
    if day != 'all':
        # filter by day of week to create the new dataframe
        df = df[df['day_of_week'] == day.title()]

    return df
    
    
    
    
#print(df)  # until here the program is working and getting data from csv document.

#      
def time_stats(df):
    print("\ncalculating  the most frequent times of travel\n")
    #start_time=time.time()
    #print(start_time)
    #print(df.head(10))
    df['Start time'] = pd.to_datetime(df['Start Time'])
    df['month'] = df['Start Time'].dt.month
    df['day'] = df['Start Time'].dt.day
    df['hour'] = df['Start Time'].dt.hour
    
    common_month = df['month'].mode()[0] 
    popular_day = df['day'].mode()[0]
    popular_hour = df['hour'].mode()[0]
    
   

    
    
       
    
    print("The most popular month is: {0}\nThe most popular day is: {1}\nThe most popular hour  is: {2}".format(common_month,popular_day,popular_hour))
    
#tiempo = time_stats(df)    
#print(time_stats(df))

time_stats(df)    


#print(df.head(1))
def station_stats(df):
    #print(df.head(5))
    colum = df['Start Station'].mode()
    print('start estation',colum)
    end_station = df['End Station'].mode()
    print('end estation',end_station)
    print(df.head(5))
    '''     
    start_station = df['Start Station']
    print(start_station.head(4))
    
    end_station = df['End Station']
    print(end_station.head(4))
    newcol = start_station + end_station
    
    print(newcol.value_counts())
     
    #combination = df[df['Start Station'] == 'End Station']
   
#print('The most popular combinatios is', combination)
    '''
    
    
#print(df.head(1))
def station_stats(df):
    #print(df.head(5))
    colum = df['Start Station'].mode()
   
    end_station = df['End Station'].mode()
     
    
         
    start_station = df['Start Station']
    
    
    end_station = df['End Station']
    
    newcol = start_station + end_station
    print(df.head(3))
 
    print(newcol)
        
def trip_duration_stats(df):
    trip_duration_column = df['Trip Duration']
    
    #print(df.columns)
    #print(columna_duracion_viaje)
    total = trip_duration_column.sum()
    print("The total durations of all the trips   : ",total)
    
    mean = trip_duration_column.mean()
    print("The mean travel time is : ", mean)
    
def user_stats(df):
    #Count of user types
    print(df.columns)
    ut = df["User Type"]
    print("Count of User types: \n",ut.value_counts())
    
    gender = df["Gender"]
    print("Count of gender : \n",gender.value_counts())
    
    year = df['Birth Year']
    print("count the earlist year of birth", year.min())
    print("count the most recent year of birth", year.max())
    print("count the most common year of birth", year.mode())
        
